%---------------------------------------------------------------------
% file name : test_2d_fft_by_row_and_col_proc_outputs.m
% Student: Ray Duran
% Date: 9/9/22
% Class : EECS 999
% University of North Dakota
% Descr: Generate 2D FFT outputs by row FFT followed by col FFT
%---------------------------------------------------------------------
clf,clear all, close all

% read in a tif file
%X = imread('cameraman.tif');

% create a square full intensity at center of image

Max_value = 255; % uint8 rgb 
N_image = 256;
N_imp = 2;
[ image_out] = center_impulse(N_imp,N_image,Max_value);

debug = 1;
X = uint8(image_out);
debug = 1;
Clim1 = 256;
createfigure(X,Clim1,N_imp)
debug = 1;


%
sizeX = size(X,1);
sizeY = size(X,2);

% Setup Figure
lims = [ -256 256];
clim = [ 0 2000];
figure(1), clf
plot(1)
imageh = imagesc(zeros(sizeX));
axis square, axis off, axis xy
set(gca,'xlim',[lims(2)-30 lims(2)+30],'ylim',[lims(2)-30 lims(2)+30],'clim',[clim(1) clim(2)])
title('Amplitude Spectrum')
 
% Process FFT by Row
ImgByRow = zeros(sizeX,sizeY);
for i = 1 : sizeX
      XRow = X(i,:);
      % 1-D FFT
      %ImgByRow(i,:) = abs(fftshift(fft(XRow)));
      ImgByRow(i,:) = (fftshift(fft(XRow)));
      debug = 1;
end
debug = 1;
% Process FFT by Col
PreImage = zeros(sizeX,sizeY);
for j = 1 : sizeY
      XCol = ImgByRow(:,j);
      % 1-D FFT
      %ImgByRow(i,:) = abs(fftshift(fft(XRow)));
      PreImage(:,j) = (fftshift(fft(XCol)));
      debug = 1;
end
debug = 1;
 img = abs(PreImage);

set(imageh,'CData',img);

debug = 1;

% For displaying image intensity of ffts
Clim1 = 2000; 
createfigure(img,Clim1,N_imp)

debug = 1;
%--------------------------------------------------
%% functions
%--------------------------------------------------

function [ image_out] = center_impulse(N_imp,N_image,Max_value)
% center a N_impxN_imp inside of a N_image x N_image
% Only use square images that are 2^N( for ease use of FFT)
X1 = zeros(N_image,N_image);
delta_row_lower = (N_image - N_imp)/2;
row_upper_start_pixel = N_image - delta_row_lower - N_imp;
row_upper_end_pixel   = row_upper_start_pixel + N_imp;
row_lower_start_pixel = N_image - delta_row_lower;
row_lower_end_pixel   = row_lower_start_pixel + N_imp;

% default to rgb uint8
for i = row_upper_start_pixel : row_upper_end_pixel
   for j = row_upper_start_pixel : row_upper_end_pixel
       X1(i,j) = Max_value;
   end
end

debug = 1;
image_out = X1;


end


function createfigure(cdata1,Clim1,N_imp)
%CREATEFIGURE(cdata1)
%  CDATA1:  image cdata

%  Auto-generated by MATLAB on 03-Sep-2022 13:09:48

% Create figure
figure1 = figure;

% Create axes
axes1 = axes('Parent',figure1);
axis off
hold(axes1,'on');

% Create image
image(cdata1,'Parent',axes1,'CDataMapping','scaled');

% Create title
title('Amplitude Spectrum w/impulse square size',num2str(N_imp));

% Uncomment the following line to preserve the X-limits of the axes
% xlim(axes1,[-7.20655734386856 296.061659755709]);
% Uncomment the following line to preserve the Y-limits of the axes
% ylim(axes1,[-23.8000217425869 279.46819535699]);
box(axes1,'on');
axis(axes1,'square');
%hold(axes1,'off');
% Set the remaining axes properties
set(axes1,'CLim',[0 Clim1],'Layer','top');

hold(axes1,'off');
end

